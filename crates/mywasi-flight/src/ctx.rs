// SPDX-FileCopyrightText: 2025 SEERA Networks Corporation <info@seera-networks.com>
// SPDX-License-Identifier: MIT

use wasmtime::component::ResourceTable;
use snpguest::report::AttestationConfig;

/// Builder-style structure used to create a [`FlightCtx`].
///
/// This type is used to create a [`FlightCtx`] that is considered per-[`Store`]
/// state. The [`build`][FlightCtxBuilder::build] method is used to finish the
/// building process and produce a finalized [`FlightCtx`].
pub struct FlightCtxBuilder {
    server_url: String,
    use_tls: bool,
    ca_cert_pem: Option<Vec<u8>>,
    jwt: Option<String>,
    attestation_config: AttestationConfig,
}

impl FlightCtxBuilder {
    /// Creates a new builder with default configuration.
    pub fn new() -> Self {
        Self {
            server_url: "http://localhost:50053".to_string(),
            use_tls: false,
            ca_cert_pem: None,
            jwt: None,
            attestation_config: AttestationConfig {
                proc_type: snpguest::fetch::ProcType::Milan,
                endorsement: snpguest::fetch::Endorsement::Vcek,
            },
        }
    }

    /// Sets the server URL to connect to.
    pub fn server_url(mut self, server_url: &str) -> Self {
        self.server_url = server_url.to_string();
        self
    }

    /// Sets whether to use TLS.
    pub fn use_tls(mut self, on: bool) -> Self {
        self.use_tls = on;
        self
    }

    /// Sets TLS CA certificate.
    pub fn ca_cert_pem(mut self, ca_cert_pem: &Vec<u8>) -> Self {
        self.ca_cert_pem = Some(ca_cert_pem.clone());
        self
    }

    /// Sets jwt to send.
    pub fn jwt(mut self, jwt: &str) -> Self {
        self.jwt = Some(jwt.to_string());
        self
    }

    /// Sets attestation config to get report.
    pub fn attestation_config(mut self, att_config: &AttestationConfig) -> Self {
        self.attestation_config = att_config.clone();
        self
    }

    /// Finalizes the building process and produces a [`FlightCtx`].
    pub fn build(self) -> FlightCtx {
        FlightCtx {
            server_url: self.server_url,
            use_tls: self.use_tls,
            ca_cert_pem: self.ca_cert_pem,
            jwt: self.jwt,
            attestation_config: self.attestation_config,
        }
    }
}

#[derive(Debug)]
pub struct FlightCtx {
    pub(crate) server_url: String,
    pub(crate) use_tls: bool,
    pub(crate) ca_cert_pem: Option<Vec<u8>>,
    pub(crate) jwt: Option<String>,
    pub(crate) attestation_config: AttestationConfig,
}

impl FlightCtx {
    /// Convenience function for calling [`FlightCtxBuilder::new`].
    pub fn builder() -> FlightCtxBuilder {
        FlightCtxBuilder::new()
    }
}

/// A trait which provides internal Flight state.
pub trait FlightView {
    /// Returns a mutable reference to the WASI HTTP context.
    fn ctx(&mut self) -> &mut FlightCtx;

    fn table(&mut self) -> &mut ResourceTable;
}

impl<T: ?Sized + FlightView> FlightView for &mut T {
    fn ctx(&mut self) -> &mut FlightCtx {
        T::ctx(self)
    }

    fn table(&mut self) -> &mut ResourceTable {
        T::table(self)
    }
}

impl<T: ?Sized + FlightView> FlightView for Box<T> {
    fn ctx(&mut self) -> &mut FlightCtx {
        T::ctx(self)
    }

    fn table(&mut self) -> &mut ResourceTable {
        T::table(self)
    }
}

/// A concrete structure that all generated `Host` traits are implemented for.
///
/// This type serves as a small newtype wrapper to implement all of the `Host`
/// traits for `flight`. This type is internally used and is only needed if
/// you're interacting with `add_to_linker` functions generated by bindings
/// themselves (or `add_to_linker_get_host`).
///
/// This type is automatically used when using
/// [`add_to_linker_async`](crate::add_to_linker_async)
/// or
/// [`add_to_linker_sync`](crate::add_to_linker_sync)
/// and doesn't need to be manually configured.
#[repr(transparent)]
pub struct FlightImpl<T>(pub T);

impl<T: FlightView> FlightView for FlightImpl<T> {
    fn ctx(&mut self) -> &mut FlightCtx {
        self.0.ctx()
    }

    fn table(&mut self) -> &mut ResourceTable {
        self.0.table()
    }
}
